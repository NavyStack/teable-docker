
services:
  teable:
    image: ghcr.io/teableio/teable:latest
    deploy:
      replicas: 2
    restart: always
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.teable-example.rule=Host(`table.example.com`)'
      - 'traefik.http.routers.teable-example.service=teable-example'
      - 'traefik.http.routers.teable-example.entrypoints=websecure'
      - 'traefik.http.services.teable-example.loadbalancer.server.port=3000'
      - 'traefik.http.routers.teable-example.tls=true'
      - 'traefik.http.routers.teable-example.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.teable-example.middlewares=compress@file'
    environment:
      - TZ=${TIMEZONE}
      - NEXT_ENV_IMAGES_ALL_REMOTE=true
    networks:
      - teable-network
      - traefik-network
    depends_on:
      teable-db-migrate:
        condition: service_completed_successfully
      teable-cache:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      start_period: 5s
      interval: 5s
      timeout: 3s
      retries: 3

  teable-db-migrate:
    image: ghcr.io/teableio/teable-db-migrate:latest
    environment:
      - TZ=${TIMEZONE}
      - PRISMA_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    networks:
      - teable-network

  teable-db:
    image: postgres:15.4
    restart: always
    volumes:
      - teable-db:/var/lib/postgresql/data:rw
      # you may use a bind-mounted host directory instead,
      # so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
    environment:
      - TZ=${TIMEZONE}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - teable-network
    healthcheck:
      test: ['CMD-SHELL', "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 3s
      retries: 3

  teable-cache:
    image: redis:7.2.4
    restart: always
    volumes:
      - teable-cache:/data:rw
      # you may use a bind-mounted host directory instead,
      # so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/cache/data:/data:rw
    networks:
      - teable-network
    command: redis-server --appendonly yes --requirepass ${POSTGRES_PASSWORD}
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3

networks:
  teable-network:
    external: true
  traefik-network:
    external: true

volumes:
  teable-db: {}
  teable-cache: {}
  teable-storage: {}
